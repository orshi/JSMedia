package  {	import flash.display.*;	import flash.events.*;	import flash.utils.*;	import fl.transitions.*;	import fl.transitions.easing.*;      /**	 * This class implements a simple wrapper for a *webpage* which can add child page and return homepage	 * easily.	 * 	 * @author Shoutao Xie	 * @langversion ActionScript 3.0	 * @playerversion Flash 11.0	 */	public class SimplePage extends Sprite{        private var _btnToPage:Dictionary = new Dictionary(); 				public function SimplePage() {			// constructor code		}				/**		 * @Core function: user only to add a line code to add the backhome event.		 * e.g. addBacktoHomeEvent(mybg);		 */		protected function addBacktoHomeEvent(bgInstance:Sprite) {			bgInstance.addEventListener(MouseEvent.CLICK, returnToParentHandler);		}				/**		 * @Core function: user only to add a line code to add a new page event.		 * e.g. addBtnOpenPageEvent(mybtn, page);		 */		protected function addBtnOpenPageEvent(btn:SimpleButton, pageClassName:String):void {			_btnToPage[btn] = pageClassName;			// TODO: the button hand cursor is normal when publising swf format.			// but the hand disappeared when embedding into html...			btn.addEventListener(MouseEvent.CLICK, pageBtnClickHandler);		}				private function pageBtnClickHandler(event:MouseEvent):void {			if (!(event.target in _btnToPage))				trace("Fatal error! The specified page class definition assiocated with button " +					  event.target.toString() + " can't be found");			var pageClassName = _btnToPage[event.target];			trace("pageClassName = " + pageClassName);						// TODO: if the specified class definition can't be found, we may should give			// a custom handle logic here.			var cla:Class = getDefinitionByName(pageClassName) as Class;			var pageInstance = new cla() as SimplePage;			addPage(pageInstance);		}				protected function addPage(childPage:SimplePage):void {			addChild(childPage);		    childPage.x = this.width;			childPage.y = 0;			easeInPage(childPage);		}			    protected function removePage(childPage:SimplePage):void {			easeOutPage(childPage);		}			    private function returnToParentHandler(event:MouseEvent):void {			var parentPage:SimplePage = parent as SimplePage;						// TODO: need to more explict check.			// e.g the parent page instance type must be SimplePage.			if (parentPage != null) {				parentPage.removePage(this);			} else {				trace("parentpage == null!");			}		}				private function easeInPage(childPage:SimplePage):void {			var slide:Tween = new Tween(childPage, "x", Regular.easeIn, childPage.x, childPage.x - this.width / 2, 10);		}				private function easeOutPage(childPage:SimplePage):void {			var slide:Tween = new Tween(childPage, "x", Regular.easeOut, childPage.x, childPage.x + this.width, 10);			slide.addEventListener(TweenEvent.MOTION_FINISH, onMotionFinish);		}			    private function onMotionFinish(e:TweenEvent):void	{			removeChild(e.target.obj);		}	}}